{"version":3,"sources":["TodoListMenu.js","TodoMenu.js","serviceWorker.js","index.js"],"names":["TodoListMenu","props","useState","line","setLine","className","onClick","style","textDecoration","text","TodoMenu","item","setItem","newItem","setNewitem","Fragment","Grid","xs","md","type","placeholder","value","onChange","event","target","Button","preVal","map","val","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSAuBeA,EApBM,SAACC,GAAW,IAAD,EAELC,oBAAS,GAFJ,mBAErBC,EAFqB,KAEhBC,EAFgB,KAU5B,OACA,yBAAKC,UAAW,cACZ,0BAAMC,QARS,WAEfF,GAAQ,KAOJ,kBAAC,IAAD,CAAYC,UAAU,gBAE7B,wBAAIE,MAAQ,CAACC,eAAiBL,EAAQ,eAAiB,SAAvD,IAAmEF,EAAMQ,KAAzE,O,yBC2DUC,EApEE,WAAO,IAAD,EACAR,qBADA,mBAChBS,EADgB,KACXC,EADW,OAEMV,mBAAS,IAFf,mBAEhBW,EAFgB,KAERC,EAFQ,KA+BvB,OACA,kBAAC,IAAMC,SAAP,KACI,kBAACC,EAAA,EAAD,CAAMX,UAAW,YACb,kBAACW,EAAA,EAAD,CAAMX,UAAW,aAAaY,GAAI,GAAIC,GAAI,GAC1C,6BACA,0CACA,6BACA,2BAAOC,KAAO,OACbC,YAAa,cACbC,MAAQV,EACRW,SApCQ,SAACC,GAElBX,EAAQW,EAAMC,OAAOH,UAoCZ,0BAAMf,QApBI,WAEfM,EAAQ,MAmBH,kBAACa,EAAA,EAAD,CAAQpB,UAAU,SAASC,QA7BjB,WAChBK,GACHG,GAAY,SAACY,GACR,MAAM,GAAN,mBAAWA,GAAX,CAAkBf,SA2BX,kBAAC,IAAD,QAGH,6BACG,4BACKE,EAAQc,KAAI,SAACC,EAAIC,GACd,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAOpB,KAAMmB,QAKvC,6BAEA,0BAAOvB,UAAU,aAAaC,QAhDvB,WAEfQ,EAAW,MA+CC,kBAAC,IAAD,WCxDIiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b7cb0d19.chunk.js","sourcesContent":["import React , { useState }from 'react';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nconst TodoListMenu = (props) => {\r\n    \r\n    const [line,setLine] = useState(false);\r\n    \r\n    const cutThrough = () => {\r\n\r\n        setLine(true);\r\n    }\r\n   \r\n   \r\n    return(\r\n    <div className ='todo_style'>\r\n        <span onClick={cutThrough}>\r\n            <DeleteIcon className=\"deleteIcon\" /> \r\n        </span> \r\n     <li style={ {textDecoration : line ?  'line-through' : 'none'} }> {props.text} </li> \r\n    </div>);\r\n}\r\n\r\n\r\nexport default TodoListMenu;","import React, { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport \"./ToDoStyles.css\";\r\nimport List from './TodoListMenu';\r\nimport ClearAllIcon from '@material-ui/icons/ClearAll';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n\r\nconst TodoMenu = () => {\r\nconst [item,setItem] = useState();\r\nconst [newItem,setNewitem] = useState([]);\r\n\r\n\r\nconst itemEvent =(event) => {\r\n\r\nsetItem(event.target.value);\r\n};\r\n\r\nconst clearItems = () => {\r\n \r\n    setNewitem([]);\r\n};\r\n\r\nconst clickFired = () => {\r\nif(item) {\r\nsetNewitem ((preVal) => {\r\n     return([...preVal,item])\r\n });\r\n}\r\n};\r\n\r\nconst clearButton= () => {\r\n        \r\n    setItem('');    \r\n    \r\n};\r\n\r\n\r\n\r\nreturn (\r\n<React.Fragment>\r\n    <Grid className ='main_div' >\r\n        <Grid className ='center_div' xs={12} md={3}>\r\n        <br />\r\n        <h1>To Do List</h1>\r\n        <br />\r\n        <input type = \"text\" \r\n         placeholder =\" Type here \"\r\n         value={ item }\r\n         onChange ={ itemEvent }\r\n         />\r\n         <span onClick= { clearButton }>\r\n         <Button className=\"newBtn\" onClick ={ clickFired }>\r\n            <AddIcon />\r\n         </Button>\r\n         </span>\r\n         <br />\r\n            <ol>\r\n                {newItem.map((val,index) => {\r\n                    return <List key={index} text={val}/>  ;\r\n                  }) \r\n                }\r\n            </ol>\r\n\r\n            <br />\r\n            \r\n            <span  className=\"styleclear\" onClick={clearItems} >\r\n                <ClearAllIcon />\r\n            </span>\r\n        </Grid>\r\n\r\n    </Grid>\r\n</React.Fragment>);\r\n} ;\r\n\r\n\r\nexport default TodoMenu;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './TodoMenu';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}